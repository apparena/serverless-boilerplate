frameworkVersion: ">=1.2.0 <2.0.0"

service: serverless-boilerplate # NOTE: update this with your service name

provider:
  name: aws
  runtime: nodejs8.10
  #timeout: 240
  #memorySize: 512
  #versionFunctions: false # optional, default is true
  stage: ${opt:stage, "dev"}
  region: ${opt:region, "eu-central-1"}
  vpc: ${file(config/${self:provider.stage}.yml):vpc}

  cfLogs: true
  environment: ${file(config/${self:provider.stage}.yml):ENVIRONMENT}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - "logs:CreateLogGroup"
        - "logs:CreateLogStream"
        - "logs:PutLogEvents"
        - "ec2:CreateNetworkInterface"
        - "ec2:DescribeNetworkInterfaces"
        - "ec2:DeleteNetworkInterface"
        - "SNS:Publish"
      Resource:
        - '*'
#    - Effect: Allow
#      Action:
#      - dynamodb:*
#      Resource: arn:aws:dynamodb:${self:provider.environment.SERVERLESS_REGION}:*:*
#    - Effect: Allow
#      Action:
#      - SNS:*
#      Resource: arn:aws:sns:${self:provider.environment.SERVERLESS_REGION}:*:*
#    - Effect: Allow
#      Action:
#      - KMS:Decrypt
#      Resource: ${self:custom.kmsSecrets.keyArn}
package:
  individually: true
  exclude:
    - test/**
    - .git/**

functions:

plugins:
  - serverless-mocha-plugin
  - serverless-webpack
  - serverless-offline
  - serverless-kms-secrets
  - serverless-plugin-custom-roles
  - serverless-plugin-split-stacks
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

custom:
  serverless-mocha-plugin:
    functionTemplate: templates/function.ejs
# Uncomment these if you need to run the service offline for testing
#    preTestCommands:
#      - bash .tools/startOffline.sh
#    postTestCommands:
#      - bash .tools/stopOffline.sh
  webpack:
    includeModules: true
#  kmsSecrets: ${file(kms-secrets.${opt:stage, self:provider.stage}.${opt:region, self:provider.region}.yml)}

  # Api Gateway Input validation using Swagger: @see https://github.com/serverless/serverless/issues/3464#issuecomment-356610450
  documentation:
    models:
      - name: CalculateMatchRequest
        contentType: "application/json"
        schema:
          required:
            - matchId
            - team1Score
            - team2Score
          properties:
            matchId:
              type: integer
            team1Score:
              type: integer
            team2Score:
              type: integer
resources:
  Resources:
    onlyBody:
      Type: "AWS::ApiGateway::RequestValidator"
      Properties:
        Name: 'only-body'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
#    SessionsTable:
#      Type: AWS::DynamoDB::Table
#      DeletionPolicy: Delete
#      Properties:
#        AttributeDefinitions:
#          - AttributeName: id
#            AttributeType: S
#        KeySchema:
#          - AttributeName: id
#            KeyType: HASH
#        ProvisionedThroughput:
#          ReadCapacityUnits: 1
#          WriteCapacityUnits: 1
#        TableName: ${self:provider.environment.TABLE_NAME}
